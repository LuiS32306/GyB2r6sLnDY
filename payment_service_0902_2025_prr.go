// 代码生成时间: 2025-09-02 20:25:54
package main

import (
    "context"
    "fmt"
    "google.golang.org/grpc"
    "google.golang.org/grpc/codes"
    "google.golang.org/grpc/status"
    "log"
    "time"
)

// PaymentService defines the payment process service.
type PaymentService struct {
    // Embedding unexported fields is not allowed, so we use an unexported type for the server.
    // This is to prevent the compiler from complaining about unkeyed struct fields.
    server *grpc.Server
}

// PaymentRequest is the request message for the payment process.
type PaymentRequest struct {
    TransactionId string
    Amount        float64
}

// PaymentResponse is the response message for the payment process.
type PaymentResponse struct {
    Status string
}

// ProcessPayment is the RPC method to process a payment.
func (s *PaymentService) ProcessPayment(ctx context.Context, req *PaymentRequest) (*PaymentResponse, error) {
    // Simulate a payment process with a delay.
    time.Sleep(2 * time.Second)

    // Check if the transaction ID is valid.
    if req.TransactionId == "" {
        return nil, status.Error(codes.InvalidArgument, "Transaction ID is required")
    }

    // Perform the payment logic here. For simplicity, we assume the payment is always successful.
    // In a real-world scenario, you would integrate with a payment gateway or service here.

    // Return a payment response with a success status.
    return &PaymentResponse{Status: "Success"}, nil
}

// StartServer starts the gRPC server.
func (s *PaymentService) StartServer(address string) error {
    lis, err := net.Listen("tcp", address)
    if err != nil {
        return err
    }

    s.server = grpc.NewServer()
    //Register the service with the server
    RegisterPaymentServiceServer(s.server, s)
    return s.server.Serve(lis)
}

// StopServer stops the gRPC server.
func (s *PaymentService) StopServer() {
    if s.server != nil {
        s.server.Stop()
    }
}

func main() {
    // Create a new payment service instance.
    s := &PaymentService{}

    // Start the gRPC server.
    if err := s.StartServer(":50051"); err != nil {
        log.Fatalf("Failed to start server: %v", err)
    }
    fmt.Println("Payment service is running on :50051")
}

// Below are the generated code snippets for the gRPC service.
// RegisterPaymentServiceServer registers the service on the server.
func RegisterPaymentServiceServer(s *grpc.Server, srv *PaymentService) {
    s.RegisterService(&_PaymentService_serviceDesc, srv)
}

// This is a compile-time assertion to ensure that your struct implements the service.
var _ PaymentServiceServer = &PaymentService{}

// Please note that the following code was generated by a tool.
// If you make any changes, they may be overwritten by the tool.
// The tool used here is `protoc` with the gRPC Go plugin.

// The file descriptor for the payment.proto file.
var _PaymentService_fileDescriptor = []byte{...}

// The proto definitions for the payment service.
type PaymentServiceServer interface {
    ProcessPayment(context.Context, *PaymentRequest) (*PaymentResponse, error)
}

func _PaymentService_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
    in := new(PaymentRequest)
    if err := dec(in); err != nil {
        return nil, err
    }
    if interceptor == nil { return srv.(PaymentServiceServer).ProcessPayment(ctx, in)
    }
    info := &grpc.UnaryServerInfo{
        Server:     srv,
         FullMethod: "/payment.PaymentService/ProcessPayment",
    }
    handler := func(ctx context.Context, req interface{}) (interface{}, error) {
        return srv.(PaymentServiceServer).ProcessPayment(ctx, req.(*PaymentRequest))
    }
    return interceptor(ctx, in, info, handler)
}

var _PaymentService_serviceDesc = grpc.ServiceDesc{
    ServiceName: "payment.PaymentService",
    HandlerType: (*PaymentServiceServer)(nil),
    Methods: []grpc.MethodDesc{
        {
            MethodName: "ProcessPayment",
            Handler: _PaymentService_ProcessPayment_Handler,
        },
    },
    Streams:  []grpc.StreamDesc{},
    Metals:   []grpc.UnaryServerInterceptor{},
}
