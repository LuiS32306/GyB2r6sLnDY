// 代码生成时间: 2025-09-09 22:54:41
package main

import (
    "context"
    "fmt"
    "google.golang.org/grpc"
    "google.golang.org/grpc/codes"
    "google.golang.org/grpc/status"
    "log"
    "time"
)

// User represents a user entity
type User struct {
    Username string
    Password string
}

// AuthServiceServer is the server API for AuthService service
type AuthServiceServer struct{}

// Authenticate checks the user credentials and returns a success or error
func (s *AuthServiceServer) Authenticate(ctx context.Context, req *AuthenticateRequest) (*AuthenticateResponse, error) {
    // Simulate user database
    users := map[string]string{
        "admin": "password123",
    }

    // Check if the provided username and password match
    if password, ok := users[req.Username]; ok {
        if password == req.Password {
            return &AuthenticateResponse{Success: true}, nil
        }
    }

    // Return an error if authentication fails
    return nil, status.Errorf(codes.Unauthenticated, "invalid credentials")
}

// The following are stubs for the required service definitions
type AuthenticateRequest struct {
    Username string
    Password string
}

type AuthenticateResponse struct {
    Success bool
}

func main() {
    lis, err := net.Listen("tcp", ":50051")
    if err != nil {
        log.Fatalf("failed to listen: %v", err)
    }

    s := grpc.NewServer()
    RegisterAuthServiceServer(s, &AuthServiceServer{})
    fmt.Println("server listening at :50051")
    if err := s.Serve(lis); err != nil {
        log.Fatalf("failed to serve: %v", err)
    }
}

// RegisterAuthServiceServer registers the AuthServiceServer to the gRPC server
func RegisterAuthServiceServer(s *grpc.Server, srv *AuthServiceServer) {
    s.RegisterService(&_AuthService_serviceDesc, srv)
}

// This function would typically be generated by the protocol buffer compiler
var _AuthService_serviceDesc = grpc.ServiceDesc{
    ServiceName: "AuthService",
    HandlerType: (*AuthServiceServer)(nil),
    Methods: []grpc.MethodDesc{
        {
            MethodName: "Authenticate",
            Handler: func (srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
                return srv.(*AuthServiceServer).Authenticate(ctx, dec(&AuthenticateRequest{}))
            },
        },
    },
    Streams:  []grpc.StreamDesc{},
   Metadata: "auth_service.proto",
}
