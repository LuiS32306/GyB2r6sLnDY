// 代码生成时间: 2025-08-01 11:07:56
 * It provides services to analyze text files and return insights.
 */

package main

import (
    "context"
    "fmt"
    "io/ioutil"
    "log"
    "os"
    "strings"
    "google.golang.org/grpc"
    "google.golang.org/grpc/reflection"
    "pb" // Assuming 'pb' is the package name generated by protoc for the protobuf definitions
)

// FileAnalyzerService defines the service that can be used to analyze text files.
type FileAnalyzerService struct {
    // No additional fields needed for this basic example
}

// AnalyzeFile reads a text file and returns its content, line count, and word count.
func (s *FileAnalyzerService) AnalyzeFile(ctx context.Context, req *pb.AnalysisRequest) (*pb.AnalysisResponse, error) {
    filePath := req.GetFilePath()
    if filePath == "" {
        return nil, fmt.Errorf("file path cannot be empty")
    }

    content, err := ioutil.ReadFile(filePath)
    if err != nil {
        return nil, fmt.Errorf("failed to read file: %v", err)
    }

    lineCount := strings.Count(string(content), "
") + 1
    wordCount := len(strings.Fields(string(content)))

    return &pb.AnalysisResponse{
        Content:    string(content),
        LineCount:  int32(lineCount),
        WordCount:  int32(wordCount),
    }, nil
}

func main() {
    // Port on which the gRPC server will be running
    port := ":50051"

    // Create a new gRPC server
    server := grpc.NewServer()

    // Register the FileAnalyzerService on the server
    pb.RegisterFileAnalyzerServer(server, &FileAnalyzerService{})

    // Register reflection service on gRPC server and serve.
    reflection.Register(server)

    fmt.Printf("Server listening on %s
", port)
    if err := server.Serve(listen(port)); err != nil {
        log.Fatalf("Failed to serve: %v", err)
    }
}

// listen starts the listener for the server.
func listen(port string) net.Listener {
    listener, err := net.Listen("tcp", port)
    if err != nil {
        log.Fatalf("Failed to listen on port %s: %v", port, err)
    }
    return listener
}