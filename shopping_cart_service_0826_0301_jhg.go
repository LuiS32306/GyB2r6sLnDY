// 代码生成时间: 2025-08-26 03:01:44
package main

import (
    "context"
    "log"
    "net"

    "google.golang.org/grpc"
    "google.golang.org/grpc/codes"
    "google.golang.org/grpc/status"
    "google.golang.org/protobuf/types/known/emptypb"
)

// ShoppingCartService defines the service which provides shopping cart functionality.
type ShoppingCartService struct {
    // A map to simulate a database for the shopping cart items.
    items map[string]*CartItem
}

// CartItem represents an item in the shopping cart.
type CartItem struct {
    ID    string
    Name  string
    Price float64
}

// AddItem adds a new item to the shopping cart.
func (s *ShoppingCartService) AddItem(ctx context.Context, req *AddItemRequest) (*emptypb.Empty, error) {
    if _, exists := s.items[req.GetItemId()]; exists {
        return nil, status.Errorf(codes.AlreadyExists, "item already exists in the cart")
    }
    s.items[req.GetItemId()] = &CartItem{ID: req.GetItemId(), Name: req.GetName(), Price: req.GetPrice()}
    return &emptypb.Empty{}, nil
}

// RemoveItem removes an item from the shopping cart.
func (s *ShoppingCartService) RemoveItem(ctx context.Context, req *RemoveItemRequest) (*emptypb.Empty, error) {
    if _, exists := s.items[req.GetItemId()]; !exists {
        return nil, status.Errorf(codes.NotFound, "item not found in the cart")
    }
    delete(s.items, req.GetItemId())
    return &emptypb.Empty{}, nil
}

// ListItems lists all items in the shopping cart.
func (s *ShoppingCartService) ListItems(ctx context.Context, req *emptypb.Empty) (*ListItemsResponse, error) {
    var items []*CartItem
    for _, item := range s.items {
        items = append(items, item)
    }
    return &ListItemsResponse{Items: items}, nil
}

// StartServer starts the gRPC server and listens on the given address.
func StartServer(address string) error {
    lis, err := net.Listen("tcp", address)
    if err != nil {
        log.Fatalf("failed to listen: %v", err)
        return err
    }
    grpcServer := grpc.NewServer()
    shoppingCartService := &ShoppingCartService{items: make(map[string]*CartItem)}
    RegisterShoppingCartServiceServer(grpcServer, shoppingCartService)
    log.Printf("server listening at %v", address)
    return grpcServer.Serve(lis)
}

func main() {
    if err := StartServer(":50051"); err != nil {
        log.Fatalf("failed to start server: %v", err)
    }
}

// The following are the definitions of the proto messages, services, and the registration code.
// These should be generated by the protoc compiler based on the .proto file definitions.
//
// AddItemRequest represents a request to add an item to the shopping cart.
type AddItemRequest struct {
    ItemId string
    Name   string
    Price  float64
}

// RemoveItemRequest represents a request to remove an item from the shopping cart.
type RemoveItemRequest struct {
    ItemId string
}

// ListItemsResponse represents the response from listing items in the shopping cart.
type ListItemsResponse struct {
    Items []*CartItem
}

// RegisterShoppingCartServiceServer registers the ShoppingCartService with the gRPC server.
func RegisterShoppingCartServiceServer(s *grpc.Server, srv *ShoppingCartService) {
    RegisterShoppingCartServiceServer(s, srv)
}
